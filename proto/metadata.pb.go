// Code generated by protoc-gen-go.
// source: metadata.proto
// DO NOT EDIT!

package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type DisksRequest struct {
}

func (m *DisksRequest) Reset()         { *m = DisksRequest{} }
func (m *DisksRequest) String() string { return proto1.CompactTextString(m) }
func (*DisksRequest) ProtoMessage()    {}

type Disk struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Disk) Reset()         { *m = Disk{} }
func (m *Disk) String() string { return proto1.CompactTextString(m) }
func (*Disk) ProtoMessage()    {}

type DisksReply struct {
	Disks []*Disk `protobuf:"bytes,1,rep,name=disks" json:"disks,omitempty"`
}

func (m *DisksReply) Reset()         { *m = DisksReply{} }
func (m *DisksReply) String() string { return proto1.CompactTextString(m) }
func (*DisksReply) ProtoMessage()    {}

func (m *DisksReply) GetDisks() []*Disk {
	if m != nil {
		return m.Disks
	}
	return nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Metadata service

type MetadataClient interface {
	Disks(ctx context.Context, in *DisksRequest, opts ...grpc.CallOption) (*DisksReply, error)
}

type metadataClient struct {
	cc *grpc.ClientConn
}

func NewMetadataClient(cc *grpc.ClientConn) MetadataClient {
	return &metadataClient{cc}
}

func (c *metadataClient) Disks(ctx context.Context, in *DisksRequest, opts ...grpc.CallOption) (*DisksReply, error) {
	out := new(DisksReply)
	err := grpc.Invoke(ctx, "/proto.metadata/Disks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Metadata service

type MetadataServer interface {
	Disks(context.Context, *DisksRequest) (*DisksReply, error)
}

func RegisterMetadataServer(s *grpc.Server, srv MetadataServer) {
	s.RegisterService(&_Metadata_serviceDesc, srv)
}

func _Metadata_Disks_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DisksRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MetadataServer).Disks(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Metadata_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.metadata",
	HandlerType: (*MetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Disks",
			Handler:    _Metadata_Disks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
